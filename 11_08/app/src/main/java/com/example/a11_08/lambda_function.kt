package com.example.a11_08

//람다 함수는 코틀린 뿐만 아니라 많은 프로그래밍 언어에서 제공하는 익명함수(anonymous function) 정의 기법
//주로 함수를 간단하게 정의할 때 이용하며 람다식이라고도 한다.
//코틀린으로 프로그램을 작성하다 보면 람다함수를 많이 사용하는데, 이는 코틀린에서 고차함수를 지원하기 때문
//고차함수는 매개변수나 반환값ㅇ로 함수를 이용하는데, 람다 함수는 주고받을 함수를 간단하게 정의할 때 사용

//함수 선언 형식
// fun 함수명(매개변수) { 함수 본문 }
//람다 함수 선언 형식
// { 매개변수 -> 함수 본문 }

//람다함수를 사용하는 규칙
//1. 람다 함수는 {}로 표현
//2. {}안에 화살표(->)가 있으며 화살표 왼쪽은 매개변수, 오른쪽은 함수 본문
//3. 함수의 반환값은 함수 본문의 마지막 표현식

//람다 함수 선언
//fun main(){
//    val sum = {num1: Int, num2: Int -> num1 + num2}(10, 20)
//    println(sum)
//}

//매개변수가 1개인 람다함수
//fun main(){
//    val some = {num: Int -> println(num)}
//    some(10)
//}

//매개변수가 1개인 람다 함수에 it 키워드 사용
//fun main(){
//    val some: (Int) -> Unit = {println(it)}
//    some(10)
//}
//위 코드는 람다 함수를 대입한 변수에 함수 타입을 지정하였다.
//즉, 람다함수의 매개변수 타입을 Int로 선언했으므로 it이 가리키는 데이터가 Int타입임을 알 수 있다.

//람다 함수의 반환문
fun main(){
    val some = {num1: Int, num2: Int ->
        println("in lambda function")
        num1 * num2
    }
    println("result : ${some(10, 20)}")
}
